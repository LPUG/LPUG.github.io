title: Archive
---
body:

Bisherige Präsentationen und Themen.

# 14. März 2023
# Nachlese Chemnitzer Linux-Tage

Wir hatenen einen
[Stand auf den Chemnitzer Linux-Tagen](https://chemnitzer.linux-tage.de/2023/de/programm/beitrag/206)
(CLT) am 11 und 12. März.
Drei von uns waren als Standbetreuer dabei.
Wir haben kurz berichtet was es Neues aus regionalen Open-Source-Community
gibt.

Auf den CLT gibt es viele
[interessante Vorträge](https://chemnitzer.linux-tage.de/2023/de/programm/vortraege)
und [Workshops](https://chemnitzer.linux-tage.de/2023/de/programm/workshops),
die sicher die Reise nach Chemnitz wert sind.

# 14. Februar 2023
# Programmieren lassen - Erfahrungen mit ChatGPT
## Katharina Ni

ChatGPT ist ein nützliches Werkzeug für Python-Programmieranfänger,
das unter anderem hilft, Fehler in im Code zu finden, Boilerplate-Code und
Musterdaten zu erzeugen und Hilfe zu erhalten,
wenn man den Wald vor lauter Bäumen nicht mehr sieht.
Es sollte jedoch nicht verwendet werden, um Programmieren zu lernen oder Code
zu generieren, der eine Menge Kontext erfordert.

Wir haben uns interessante
[Beispiele](https://github.com/k4th4/chatgpt_for_programming)
angesehen.
ChatGPT ist beindruckend macht aber auch "dumme" Fehler,
die manchmal nicht im Verhältnis zur eigentlich soliden Lösung stehen.


# 10. Januar 2023
# Python 3.11 - Bis zu 60 % schneller

Seit ein paar Monaten ist 3.11 verfügbar.
Wir haben uns ansehen was es Neues gibt.
Das Projekt [Faster CPython](https://docs.python.org/3/whatsnew/3.11.html#whatsnew311-faster-cpython)
hat Python 3.11 signifikant schneller gemacht.
Wir haben uns ansehen was das bedeutet.
Auch andere Feature wie verbesserte Ausnahmen und mehr Möglichkeiten beim
Typing sind interessant.


# 13. Dezember 2022
# Viele Messwerte mit Python sinnvoll darstellen
## Andre Bunk

In unserem
[Treffen im Juli 2020](#Hardware-mit-Python-ansteuern)
hatte Andre seine Temperatur-Messung mit einem Odroid-Kleincomputer
vorgestellt.
In den vergangen fast 3 Jahren sind über 1 Million Messwert angefallen.
Die Software mit Sqlite, pandas, SciPy und Dash läuft zuverlässig.
Allerdings wird die Darstellung bedingt durch die vielen Werte immer
unübersichtlicher.
Wir haben uns ansehen welche Möglichkeiten es gibt trotz der vielen Werte
die Darstellung übersichtlich und informativ zu gestalten.
Als Lösung bietet sich die Berechnung von stündlichen Mittelwerten sowie
die Gruppierung nach Stunden an.
Das Werkzeug der Wahl dafür ist sicherlich pandas, dass schon im Einsatz ist.

# 8. November 2022
# Gradual Typing in Python
## Martin Czygan

Being a dynamic language first, Python approaches type safety in a different,
gradual way.
In this talk, we looked at the broad picture of typing in Python,
its history and a bit of theory behind the implementation as well.
We'll also saw how typing can improve code quality.

# 11. Oktober 2022
# Modernes Matplotlib
## Mike Müller

[Matplotlib](https://matplotlib.org/) ist die wahrscheinlich die meist genutzte
Plotting-Bibliothek in Python.
Matplotlib unterstützt viele verschiedene Plots und biete ein große Palette
von Konfigurationsmöglichkeiten.
Die erste Version ist 2003 erschienen.
Nach fast 20 Jahren Entwicklungszeit haben sich aber auch viele Konzepte
überlebt.
Deshalb hat Matplotlib teilweise den Ruf "altbacken" und umständlich
nutzbar zu sein.
Das muss aber nicht sein.
Matplotlib kann durchaus mit anderen, neueren Plot-Bibliotheken mithalten.
Der Vortrag
[Effectively using matplotlib](https://pretalx.com/euroscipy-2022/talk/UCDNLV/)
auf der EuroSciPy 2022 gab dazu einen guten Überblick.
Aufbauend darauf haben wir uns angeschaut an wie modernes Matplotlib funktioniert.
Wer Matplotlib noch nicht kannte, konnte die grundlegende Merkmale kennenlernen.
Wer Matplotlib schon nutzte konnte sicher auch ein paar neue Tricks mitnehmen,
die die Arbeit mit dieser Bibliothek erleichtern und näher an die Workflows
anderer Bibliotheken bringen.

# 13. September 2022
# Cross-kompilieren für CPU und GPU mit Numba, oder: Python für Haskell-Liebhaber
## Sebastian Ernst

Das Python-Paket [numba](http://numba.pydata.org/) bietet einen
Just-in-Time-Compiler für (C)Python über verschiedene APIs für
verschiedene Programmierparadigma an.
Besonders interessant für mich waren dabei
[vectorize](https://numba.readthedocs.io/en/stable/user/vectorize.html#the-vectorize-decorator)
und
[guvectorize](https://numba.readthedocs.io/en/stable/user/vectorize.html#the-guvectorize-decorator),
welche in der Lage sind, "numpy-ufuncs" bzw. so genannte "generalisierte
ufuncs" zu bauen.
Beide Funktionen erlauben das Compilieren ein und des selben Python-Codes für
verschiedene Targets, u.a. (x86) CPUs und (Nvidia) GPUs.
Der Vortrag zeigte was es dabei alles so zu entdecken gibt und in welche tiefen
Löcher man dabei so fallen kann.

# 9. August 2022
# Digitale Probanden-Einwilligung mit Django
## Gefan Qian

Der Vortrag hat den aktuellen Stand einer Django-Anwendung vorgestellt, die
Daten von Probanden verarbeitet.
Im ersten Schritt müssen die Probanden der Verarbeitung ihrer Daten einwilligen.
Die Texte der Probanden-Einwilligung stellt die Anwendung dynamisch aus
individualisierten Textbausteinen zusammen.
Der Proband kann dieser Einwilligung in Form einer Unterschrift per Maus
zustimmen.
Danach erzeugt die Anwendung die unterschriebene Aufklärung im PDF-Format
und zeigt diese im Bowser an.

Wir haben gemeinsam am Code gearbeitet.
Dabei konnten wir einen URL-Endpunkt entfernen und die Funktionalität durch
einen existierenden Template-Filter ersetzen.
Damit hat sich Anzahl der Code-Zeilen beträchtlich reduziert und die
Anwendung ist einfacher geworden.

# 12. Juli 2022
# Diskussionsrunde

Wir haben uns über aktuelle Python-Themen ausgetauscht.

# 14. Juni 2022
# Python im Browser
## PyScript & Co. - Python im Browser

Eine Keynote der PyCon US hat [PyScript](https://pyscript.net/) vorgestellt.
PyScript läuft im Browser und kann Javascript vollständig ersetzen.
Es basiert auf [Pyodide](https://pyodide.org/en/stable/),
das CPython auf WebAssembly/Emscripten laufen lässt.
Auf der [PyScript Seite](https://pyscript.net/examples/) gibt es es gibt ein paar schöne Beispiele.
Wir haben uns diese näher ansehen.

# 10. Mai 2022
# Pandas-Alternativen
## Ein Erfahrungsaustausch

Die Bibliothek [pandas](https://pandas.pydata.org/) ist in der Datenanalyse weit
verbreitet.
Es gibt eine Reihe von Bibliotheken, die sich an die Funktionsweise, also die
API von pandas anlehnen und eine Alternative darstellen können.
Weiterhin gibt es Systeme mit pandas-artiger Schnittstelle,
die damit im Idealfall den Einarbeitungsaufwand auf Null minimieren.
Wir haben uns einige dieser Systeme wie:

* [Dask](https://pandas.pydata.org/) - parallele und verteile Ausführung von
   beliebigen Python-Programmen mit leichter Anwendung auf pandas
* [PandaPy](https://github.com/firmai/pandapy) - pandas-Alternative basierend
   auf dem "structured NumPy datatype", schneller für kleinere DataFrames
* [xarray](https://docs.xarray.dev/en/stable/index.html) -
  "pandas für mehr dimensionale Daten"
* [Modin](https://modin.readthedocs.io/en/stable/index.html) - parallele
   Ausführung von pandas-Code, nutzt Dask oder andere Systeme
* [Datatable](https://github.com/h2oai/datatable) - pandas-ähnlich für
   parallele Datenverarbeitung mit "out-of-memory datasets"
* [Polars](https://github.com/pola-rs/polars) - schnelle, in Rust implementierte
   DataFrame-Bibliothek basierend auf dem
   [Apache Arrow Columnar Format](https://arrow.apache.org/docs/format/Columnar.html)
* [Vaex](https://github.com/vaexio/vaex) performance-orientierte pandas-artige
   Bibliothek mit memory mapping und lazy computations
* [Pyspark](https://spark.apache.org/docs/latest/api/python/index.html#) -
   Python-Schnittstelle zu Apache mit pandas-artiger API
* [Koalas](https://github.com/databricks/koalas) - pandas-API für Apache Spark
* [cuDF](https://github.com/rapidsai/cudf) - GPU DataFrames basierend auf dem
  [Apache Arrow Columnar Format](https://arrow.apache.org/docs/format/Columnar.html)
* viele weitere ...

kurz angesehen und uns über unsere Erfahrungen zu Vor- und Nachteile dieser
Systeme ausgetauscht.


# 12. April 2022
# Offene Diskussionsrunde

# 8. März 2022
# <a id="Metadaten-GUI-2"></a>Metadaten-GUI - Teil 2
## Gefan Qian

In unserem [Treffen im Januar](#Metadaten-GUI) hatte Gefan sein Projekt
über eine dynamisch erzeugte Nutzeroberfläche für Konfigurationsdaten
vorgestellt.
Es gab Einiges an Feedback mit Änderungsvorschlägen.
Das sind die wichtigsten Änderungen in der [neuen Version](https://gitlab.gwdg.de/gefan.qian/sidecar_file_generator/-/tree/master/Juwel_restructurized):

* Nutzung von Klassen
* keine globalen Variablen mehr

Es gab noch diese offenen Punkte:

* Wie lässt sich Eventhandling bei voneinander separaten, aber dynamisch
  erstellten Entry-Feldern umsetzen?
- Wie lassen sich mit `pip install` Textdateien beim installierenden Nutzer
  in einem bestimmten Verzeichnis ablegen?
- Wieso ist trotz Benutzung verschachtelter grids das Layout ungleichmäßig?

# 8. Februar 2022,
# Auswertung PyCamp

Unser [PyCamp](https://barcamps.eu/pycamp-leipzig-2022/) Ende Januar ist
gelaufen.
Wir haben kurz ausgewertet welche Themen wir dort diskutiert hatten.
Einige das Konzept eines BarCamps noch nicht und konnten mehr darüber lernen
warum es viele Teilnehmer als sehr produktives Format empfinden.

# 11. Januar 2022
# <a id="Metadaten-GUI"></a>Metadaten-GUI - Eine dynamisch erzeugte Nutzeroberfläche für Konfigurationsdaten
## Gefan Qian

Der Vortrag stellte ein Programm vor, das anhand einer JSON-Datei eine GUI mit
den jeweiligen Elementen generiert.
Diese JSON-Datei ist eine manuell geschriebene Konfigurationsdatei.
Die TKinter-GUI erzeugt anhand der  Konfigurationsdaten dynamisch Elemente wie
Checkbox, Dropdown-Menü, Selectbox oder Kalender.
Dabei bestimmen die Konfigurationsdaten die Anzahl und Reihenfolge dieser
GUI-Elemente.

In Zukunft soll ein weiteres Werkzeug Konfigurationsdateien über ein GUI
erzeugen können.
Wir wollen diskutieren wie sich das grundsätzlich umsetzen lässt.



# 14. Dezember 2021
# Django-Admin - Ein mächtiges Werkzeug für Django-Apps und andere Anwendungen
## Andreas Bamberger

Der Django-Admin ist ein grafisches User-Interface für Django-Models.
Er lässt sich vielseitig anwenden.
Typische Anwendungen sind zum Beispiel:

* Konfigurationsschicht für Django-Applikation,
* vollwertiges Frontend für Administrative Aufgaben (wie eineVereinsverwaltung)
  und
* GUI-Schnittstelle zu Modellen (CRUD) zur vereinfachten Entwicklung komplexerer
  Applikationen

Der Vortrag hat den Django-Admin und dessen Nutzung vorgestellt.

- Aktivierung Django-Admin für Models
- Admin Customizing
    * Anpassung anzuzeigender Felder inkl. Layout (Include/Exclue, Widgets, FieldSets)
    * Integration verknüpfter Modelle (Model InLines)
    * Konfiguration Übersichtsseite (List-Display)
- Nutzerverwaltung
- Dokumentation

Alle Beispiele liegen im Repo zum Vortrag:
https://gitlab.com/a_ba/lpug-django-xmas-admin

# 9. November 2021
# Vereinsverwaltung mit Django
## Stephan Dick-Rustmeier

Der Vortrag hat den aktuellen Stand der Arbeiten an einer Software für die
bessere, digitale Verwaltung eines Modellflug-Vereins vorgestellt.
Ziel ist es, dass die Django-basierte Web-Anwendung mit allen modernen
Webrowsern auf allen gängigen Betriebssystemen funktioniert.

Ein wichtiger Bestandteil des Vortrages war die Datenmodellierung, also wie die
Anwendung Daten in Datenbank-Modellen abbildet.
Der Vortrag zeigte den derzeitigen Ansatz.

Wie immer war dies kein klassischer Vortrag mit ein paar Fragen am Ende.
Vielmehr war es eine Vorstellung eines laufenden Projektes mit Quelltexten und
Demonstrationen.
Fragen und Anmerkungen der Teilnehmer waren ein wichtiger Bestandteil.
Es gab eine lebendige Diskussion aus der die Teilnehmer etwas Neues lernen
konnten.
Der er Vortragende hat wertvolle Anregungen für seine weitere Arbeit an dem
Projekt erhalten.

# 12. Oktober 2021
# Neue Features in Python 3.10

Python 3.10 ist da.
Seit Anfang Oktober ist die neue Version offiziell raus.
Wir haben uns angeschaut was diese Version bringt.
Neben dem "Mega-Feature" Structural Pattern Matching gibt es noch einige
interessante Neuerungen wie verbesserte Fehlermeldungen, mehrere Kontext-Manager
in Klammern oder `zip`, das optional nur gleichlange Sequenzen verarbeitet.

Wir sind durch die neun Features
[What’s New In Python 3.10](https://docs.python.org/3.10/whatsnew/3.10.html)
gegangen.
Einige davon haben wir gemeinsam ausprobiert.


# 10. August 2021
# Diskussionsrunde

Wir haben über verschiedene Themen diskutiert.

# 13. Juli 2021, 19:00 Uhr
# Aufgaben abarbeiten lassen
## Dienste, Busse, Warteschlangen und andere Helfer

Unser Anwendungsfall:

Messdaten kommen kontinuierlich von einem Messgerät.
Diese soll ein Dienst verarbeiten und das Ergebnis an den nächsten Dienst
weitergeben, der wiederum mit den Daten arbeitet und das Ergebnis entsprechend
weiterreicht.
Im letzten Schritt zeigt ein Dienst das Ergebnis grafisch an.
Die Dienste können lokal oder im Netz laufen.

Wir wollen diskutieren welche Möglichkeit der Umsetzung es in Python gibt.
Was sind die Vor- und Nachteile diese für verschiedene Aufgaben-Größen?
Wie komplex sind diese Lösungen?

Bibliothek, die hier helfen könnten wären zum Beispiel
[`python-task-queue`](https://pypi.org/project/task-queue/) oder
[Azure Service Bus-Warteschlangen](https://docs.microsoft.com/de-de/azure/service-bus-messaging/service-bus-python-how-to-use-queues).


# 8. Juni 2021
# Freie Diskussionsrunde

Wir uns über die letzten Entwicklungen im Python-Ökosystem ausgetauscht.
Es gab eine lebhafte Diskussion.


# 11. Mai 2021
# Python-Pakete installieren
## Eine Diskussionsrunde

Es gibt viele sehr nützliche Bibliotheken für Python.
Man muss diese aber auch installieren können.
Oft geht das problemlos mit `pip`.
Manchmal gibt es aber Probleme.
Wir wollen uns austauschen wie man solche Probleme möglichst
vermeiden oder verhindern kann.
Welche Techniken, Bibliotheken und Vorgehensweisen gibt es dafür?
Was nutzt ihr?
Welche Erfahrungen habt ihr mit verschiedenen Methoden gemacht?


# 13. April 2021
# Meet Mob - Erste Erfahrungen mit dem Programmieren in der Gruppe
## Oliver Bestwalter

Seit Anfang des Jahres nehme ich in einer Gruppe Teil, die sich einmal in der
Woche remote trifft, um gemeinsam ein OSS Projekt zu pflegen.
Die Technik nennt sich "remote mob programming" oder
"remote ensemble programming".
Ich möchte ein wenig von der Methode und meinen Erfahrungen erzählen.



# 9. März 2021
# Structural Pattern Matching in Python
## Eine Diskussionsrunde

Python bekommt "Structural Pattern Matching".
Dies ist eine relativ große Neuerung.
Es gibt teilweise hitzige Diskussionen darüber ob dies eine tolle Erweiterung
der Sprache ist oder ob damit die Sprache zu komplex wird und sich zu sehr an
die "C++-Philosophie" *je mehr Features, desto besser* annähert.

Es gibt drei PEPs zu diesem Thema:

* PEP 634: [Specification](https://www.python.org/dev/peps/pep-0634/)
* PEP 635: [Motivation and Rationale](https://www.python.org/dev/peps/pep-0635/)
* PEP 636: [Tutorial](https://www.python.org/dev/peps/pep-0636/)

Wir haben uns die wichtigsten Elemente davon ansehen und dazu diskutiert.
Dabei versuchten wir Antworten auf Fragen wie diesen zu finden:

* Was sind die Vorteile gegenüber bisherigen Ansätzen?
* Was sind nützliche Anwendungsfälle?
* Wo könnte es zu Problemen kommen?
* Hat Guido, der maßgeblich an den oben genannten PEPs mitgearbeitet hat, noch
  die Weitsicht, die Python in den letzten Jahrzehnten zu solch einem nützlichen
  Werkzeug gemacht hat?

# 9. Februar 2021
# `pip`, `conda`, `mamba` - Python-Pakete installieren und virtuelle Umgebungen anlegen
## Eine Diskussionsrunde


# 12. Januar 2021
# Große Datenmengen in Videos animieren mit "bewegung"
## Sebastian M. Ernst

* Wie erstellt man *animierte* Visualisierungen (mit Python)?
* [Was für Bibliotheken bzw. Pakete gibt es - mit denen man auch Videos generieren kann?](https://bewegung.readthedocs.io/en/develop/about.html#similar-alternative-libraries)?
* Einführung zu und kleine Probier- und Bastel-Runde mit **bewegung**, einer neuen Bibliothek zur animierten Darstellung größerer Datenmengen:
    * [Github-Repositorium](https://github.com/pleiszenburg/bewegung)
    * [Dokumentation bei RtD](https://bewegung.readthedocs.io)
    * [Installation](https://bewegung.readthedocs.io/en/develop/installation.html): [![conda_version](https://img.shields.io/conda/vn/conda-forge/bewegung.svg?style=flat-square "conda version")](https://anaconda.org/conda-forge/bewegung) & [![pypi_versions](https://img.shields.io/pypi/pyversions/bewegung.svg?style=flat-square "Available on PyPi - the Python Package Index")](https://pypi.python.org/pypi/bewegung)

> `bewegung` is a versatile video renderer, primarily targeting scientific visualizations of large quantities of data. Its core concepts are *sequences* and *layers*. Sequences describe a certain time span within a video and can overlap. Each sequence can hold multiple layers. Layers can be generated with [`cairo`](https://cairographics.org/), [`Pillow`](https://pillow.readthedocs.io), [`datashader`](https://datashader.org/), [`matplotlib`](https://matplotlib.org/) and `bewegung`'s internal drawing system [`DrawingBoard`](https://bewegung.readthedocs.io/en/latest/canvas.html). Final compositing of every video frame and video effects are implemented via `Pillow`. Video encoding is handled by `ffmpeg`. `bewegung` also includes a simple [vector algebra system](https://bewegung.readthedocs.io/en/latest/vectors.html) and a ["camera" for 3D to 2D projections](https://bewegung.readthedocs.io/en/latest/camera.html). `bewegung` is developed with ease of use, compute time and memory efficiency in mind.

# 8. Dezember 2020
# Web APIs mit Django und GraphQL
## Andreas Bamberger

Vortragsinhalt:

* Was ist GraphQL?
  * Hintergründe und Konzepte
  * Vor & Nachteile gegenüber REST
* Vorstellung einer Referenzimplementierung mittels Graphene-Django

Präsentation und Code: https://gitlab.com/a_ba/lpug-django-graphene

# 10.11.2020
# Diskussionsrunde - "Was mich an besonders Python stört, was mir an Python besonders gefällt."

Wir haben uns online getroffen und intensiv diskutiert.
Dabei kamen Merkmale von Python, die wir besonders mögen oder die uns besonders
stören zur Sprache.
Es gab verschiedene Meinungen zu ein paar Themen, so dass man viel lernen
konnte.

# 13.10.2020
# Einfache Web-Anwendungen mit Flask
## Lukas Werner


Die kleine Einführung in das Web Framework Flask ging auf folgende Punkte ein:

- Aufsetzen einer Flask-Anwendung
- Routing & Templating (Jinja2)
- Requests und Responses
- Produktivsetzen einer Flask Anwendung mittels uWSGI
- ggf. Sessions/Flashing
- Einsatzmöglichkeiten im Data-Science-Sektor

Da jeder der Punkte eine eigene Vorstellung ausfüllen könnte, hat der Vortrag die meisten Punkte nur kurz umrissen. Einen großen Teil der Vortragszeit hat die Diskussion zum Thema eingenommen.


# 08.09.2020
# Was ist neu in Python 3.9

Die neue Python-Version wird bald verfügbar sein. Deshalb haben wir uns angesehen was Python 3.9 an neuen Merkmalen bietet.

Es gab wieder viele interessante Diskussionen zu verschiedensten Themen um Python und Softwareentwicklung. Wir hatten viele Erst-Teilnehmer, die sich rege an der Diskussion beteiligten.

# 11.08.2020
# Die Programmiersprache Nim aus Python-Sicht - Ein Erfahrungsbericht
## Stefan Schwarzer

Als langjähriger Python-Entwickler bin ich auf der Suche nach einer flexiblen statisch typisierten Programmiersprache vor einem Jahr auf Nim ( https://nim-lang.org ) gekommen.

Ich möchte euch etwas über die Sprache erzählen, unter anderem über besondere Unterschiede zu Python und wie man beide Sprachen kombinieren kann. Ich habe darüber hinaus einiges an Material, aber wir müssen nicht alles strikt durchgehen, denn ein User-Group-Treffen lebt ja auch von der Diskussion. :-)


# 14.07.2020
# Hardware mit Python ansteuern
# <a id="Hardware-mit-Python-ansteuern"></a> Hardware mit Python ansteuern
## Andre Bunk

Andre stellte sein Projekt vor.
Das sind die wichtigsten Punkte:

1. Pumpensteuerung für den Garten
1. Temperaturmessung mit TC74
1. Speichern dieser Messdaten mit SQLite
1. Auswertung von Textdateien des Mediathekview mit Python
1. Auswertung der gemessenen Temperaturwerte
1. Benutzung-Schnittstelle mit tkinter geplant

Die Quelltexte stehen zur Verfügung:

FTP: odroid.home-webserver.de <br>
Nutzer: gast <br>
Passwort: gastgast1 <br>


# 12.05.2020
# Online-Treffen
# Programming Guidelines
## Thomas Güttler

Mit 13 Jahren habe ich das Programmieren angefangen und bin nun 43.

Seit dem habe ich sehr viele Fehler gemacht und habe daraus
mehr oder weniger viel gelernt.

Seit einer Weile schreibe ich meine persönlichen Programming Guidelines
auf. Zum einen um mehr Klarheit über mein eigenes Handeln zu finden.
Zum anderen , um dem einen oder anderen Neueinsteiger ein paar Irrwege
zu ersparen.

Der Text ist auf englisch und hier zu finden:

https://github.com/guettli/programming-guidelines


# 14.01.2020
# Python-Konferenzen 2020

Mittlerweile gibt es im Prinzip jede Woche ein oder mehrere Python-Konferenzen
irgendwo auf der Welt.
Welche Python-Konferenzen sind besonders interessant?
Wie läuft eine solche Konferenz ab?
Lohnt es sich teilzunehmen?
Wenn, ja warum?
Mike Müller gab persönliche Eindrücke von ein paar Python-Konferenzen der
letzten Jahre und versuchte damit diese Fragen zu beantworten.
Das ist natürlich subjektiv und auf wenige Konferenz beschränkt.
Trotzdem könnte es bei der Entscheidung helfen eine Python-Konferenzen zu
besuchen und dann die richtige auszusuchen.

# 13.08.2019
# Fortran-Bibliotheken in Python nutzen
## Mike Müller

Viele wissenschaftliche Anwendungen sind in Fortran implementiert.
Es ist wahrscheinlich die älteste Hochsprache, die noch relativ weit verbreitet
ist.
Für numerische Anwendungen kann Fortran-Code durchaus beträchtlich schnellere
Programme ergeben als Code in C oder ähnlichen Sprachen.
Für andere Programmieraufgaben als numerische Algorithmen ist Fortran
allerdings nicht so gut geeignet.
Hier kommen die Fähigkeiten von Python ins Spiel Quelltext anderer
Programmiersprachen relativ einfach als sogenannten Erweiterungen in Python
integrieren zu können.

Dieser Vortrag stellt das Werkzeug `f2py` vor.
Damit lassen sich Fortran-Quelltext elegant in Python-Erweiterungen einbauen.
Der Zugriff auf Fortran-Arrays, die in Fortran-Modulen liegen ist mit
NumPy-Arrays von Python aus nahtlos möglich.
Oft sind Fortran-Quelltexte sehr monolithisch mit einer großen Schleifen für
Simulations-Zeitschritte aufgebaut.
Der Vortrag zeigt wie sich mit Hilfe von Callbacks und Threads Erweiterungen
bauen lassen, die die Eingriffe in diese monolithische Struktur auf ein Minimum
beschränken.
Eine Demo zeigt wie sich in einem Jupyter-Notebook Fortran-Variablen live von
Python aus anzeigen und verändern lassen.

Keine Angst: Fortran-Wissen ist nicht nötig, um dem Vortrag folgen zu können.
Solide Python-Kenntnisse sind ausreichend.
Sogar ohne Python-Wissen sollten die Grundprinzipien zu verstehen sein.

----

# 10.09.2019
# Programming Guidelines
## Thomas Güttler

Mit 13 Jahren habe ich das Programmieren angefangen und bin nun 43.

Seit dem habe ich sehr viele Fehler gemacht und habe daraus
mehr oder weniger viel gelernt.

Seit einer Weile schreibe ich meine persönlichen Programming Guidelines
auf. Zum einen um mehr Klarheit über mein eigenes Handeln zu finden.
Zum anderen , um dem einen oder anderen Neueinsteiger ein paar Irrwege
zu ersparen.

Der Text ist auf englisch und hier zu finden:

https://github.com/guettli/programming-guidelines


----

# Treffen am 11. Oktober 2018 19:00 Uhr

Robert Lieback sprach über "Desktop-Anwendungen mit PyQt5 und PyInstaller"

Best-Practices für die Desktopentwicklung: Vom Qt-Designer, über das Event-Management, zur Distribution mit PyInstaller.

----

# Treffen am 08. Mai 2018 19:00 Uhr

Sebastian Ernst über das Thema *Zahlen stapeln mit HDF5 (h5py), Bcolz & Zarr*
gesprochen.

----

# Treffen am 08. Mai 2018 19:00 Uhr

Markus Zapke-Gründemann sprach über "Can packaging improve Django deployments?"

How can packaging Django projects make deployments easier, faster and more reliable?

This is a preview of Markus' talk at DjangoCon Europe 2018 in Heidelberg. The talk will be held in English.

Es waren 13 Personen anwesend. Nach dem Vortrag gab es eine lebhafte Diskussion zum Thema Deployment von Django Projekten. Außerdem wurde das Thema Packaging weiter vertieft.

----

# Treffen am 10. April 2018 19:00 Uhr

Andreas Linz sprach über "Think DSP - Digital Signal Processing in Python".

Der Vortrag war eine Zusammenfassung des Open-Source Buches [ThinkDSP](https://github.com/AllenDowney/ThinkDSP) von Allen Downey und gleichzeitig eine Einführung in die Grundlagen der (Audio-)Signalverarbeitung.

Zu dem Buch gibt es eine Reihe von [Jupyter Notebooks](http://mybinder.org/repo/AllenDowney/ThinkDSP), die die vorgestellten Konzepte veranschaulichen.

Mit 17 Anwesenden war der Vortrag sehr gut besucht.

----

# Treffen am 13. Februar 2018 19:00 Uhr

Unser Vortrag war diesmal:

*Martin Czygan*

**Deep Learning with PyTorch**

PyTorch is a machine learning framework, with focus on deep neural
nets. PyTorch is sometimes regarded as the most pythonic among the
current generation of such tools.

We briefly introduce the problems deep learning tries to solve; then
we take a look at PyTorch and it's pythonic approach.

Repository with slides and notebooks:

* https://github.com/miku/pytorch-tour

----

# Gemütliches Weihnachtstreffen am 12.12.2017 19:00 Uhr



Das letzte LPUG-Treffen im Jahr 2017 haben wir im Rahmen der
Weihnachtszeit in gemütlicher Runde zum freien Plausch genutzt.
Weiterhin haben über mögliche Inhalte im nächsten Jahr und die zukünftige
Gestaltung der LPUG gesprochen.


## Struktur der LPUG in 2018

### grobe Jahresplanung

Unser Ziel ist es, zwei symmetrische Halbjahre aufzubauen.
Über das Jahr verteilt könnten dann u.a. folgende Themenblöcke als Inhalt
fungieren:

- 2 x coding dojo inkl. TDD
- 2 x große talks
- 2 x code review
- lightning talks
- Problem mitbringen/ Erfahrungsbericht

### Planungsstufen

Um die Mitarbeit zu motivieren und besser planbar zu gestalten, haben wir
verschiedene Planungsstufen.

#### 1. konkret (Thema, Person, Datum)

- PyTorch, Martin Czygan, Feb
- Rust, Andreas, Mrz
- Docker, Markus Zapke-Gründemann, Mai
- HDF5, Sebastian Ernst, Jul

#### 2. in Planung (Thema, Person)

- Aufbau jupyter, Martin Czygan + jupyter Beispiele, Philipp Hanemann
- home automation, Maik Derstappen
- Programmierparadigmen, Martin
- desktop applications, Robert

#### 3. interessant (Thema)

- code analyse
    - antipattern
    - error handling
    - testing
- plotting
- distributed computing
- crawler: scrappy/ beautiful soup
- project euler
- Micro Python
- Webentwicklung


# Treffen am 12. September 2017 19:00 Uhr

## How to Create a Python Package and Write Reusable Code

*Philipp Hanemann*

Python wird von vielen Nutzern wertgeschätzt, weil sie mit dieser Programmiersprache sehr produktiv sind.
Von der Idee bis zur Umsetzung sind oftmals nur wenige, aber dennoch gut lesbare Zeilen Code notwendig.
Dies ist vor allem in der Reichhaltigkeit der vorhandenen Bibliotheken begründet.
Diese bündeln in der Regel Funktionen und Klassen mit einem bestimmten thematischen Fokus und stellen damit wiederverwertbaren Code dar.
Einmal installiert, kann der Nutzer auf die Werkzeuge der Bibliothek bequem zugreifen.

Glücklicherweise ist der Aufwand eine eigene Bibliothek zu bauen unwesentlich höher als einfache Skripte zu schreiben.
Nichtsdestotrotz gibt es für ein strukturelles einiges zu beachten.

Der Vortrag zeigt wie robuster und wiederverwertbarer Code entsteht.
Die Präsentation stellt ein paar Konzepte vor und bereitet den danach folgenden interaktiven Erfahrungsaustausch vor.


# Treffen am 8. August 2017 19:00 Uhr

Wir haben unser erstes [Coding Dojo](http://codingdojo.org/WhatIsCodingDojo/)
durchgeführt.
Ein Dojo besteht aus Programmierübungen, sogenannte Katas, für kleine,
in sich abgeschlossene Probleme.
Dazu haben wir Paare gebildet.
Ein Ziel der Übungen  war es Test-Driven-Development (TDD) zu trainieren,
also die Tests vor der Implementierung zu schreiben.
Ähnlich wie bei Katas im Kampfsport geht es primär darum grundsätzliche
Fähigkeiten zu internalisieren.

## Unsere Kata

### Problem

Wir haben uns die
[Russische Bauernmultiplikation](http://ccd-school.de/coding-dojo/function-katas/russische-bauernmultiplikation/) heraus gesucht:

Schreibe eine Funktion, die zwei ganze Zahlen mit dem Algorithmus
„russische Bauernmultiplikation“ multipliziert.

Die Signatur der Methode sieht wie folgt aus:

```python
mul(int: x, int: y) --> int:
    # your code here
```

Der Algorithmus der sogenannten Russischen Bauernmultiplikation verläuft wie
folgt:
man halbiert die linke der beiden Zahlen so lange, bis die 1 erreicht ist.
Nachkommastellen werden abgerundet.
Die rechte Zahl wird jeweils daneben geschrieben und verdoppelt.
Von den rechten Zahlen werden alle gestrichen, neben denen links eine gerade
Zahl steht.
Die verbleibenden nicht gestrichenen Zahlen der rechten Seite werden dann
addiert und bilden das Ergebnis der Multiplikation.

Beispiel:

```
47 *  42
---------
47    42
23    84
11   168
 5   336
 2  (672)  # deleted because 2 ist even)
 1  1344
========
    1974
```

Das geht natürlich auch einfacher:

```python
>>> 47 *  42
1974
```


## Lösungen

### Iterative Lösung

Die Summe ist zu Beginn Null `sum_ = 0`.
Wenn der erste Wert negativ ist, kehren wir einfach die Vorzeichen
der beiden Zahlen um.
Damit decken wir auch negative Zahlen ab.
Solange der erste Wert größer Null ist (`while x > 0:`),
summieren wir auf.
Aber nur wenn der erste Wert gerade ist: `if x % 2:`.
Der erste Wert wird mit Integer-Divison halbiert `x = x // 2`
und der zweite verdoppelt `y = y * 2`.

```python
def mul(x, y):
    sum_ = 0
    if x < 0:
        x, y = -x,  -y
    while x > 0:
        if x % 2:
            sum_ += y
        x, y = x // 2, y * 2
    return sum_
```

### Lösung mit Generator

Das ist eine Variation der obigen iterativen Lösung.
Anstatt der Summierung geht zu addierende Wert mit `yield`
bei jedem Iterationsschritt raus.
Das finale `sum()` konsumiert den Generator, den die Generatorfunktion `get()`
zurück gibt.

```python
def get(x, y):
    if x < 0:
        x, y = -x,  -y
    while x > 0:
        if x % 2:
            yield y
        x, y = x // 2, y * 2

def mul2(x, y):
    return sum(v for v in get(x, y))
```



### Einfache Rekursive Lösung

Rekursiver Ansatz: Das Problem wird beschrieben als eine Kaskade von
Referenzen auf "kleinere" Instanzen des selben Problems.  Die Kaskade
mündet in einen trivialen Sonderfall, für den eine direkte Lösung
angegeben wird.  Bei rekursiven Lösungen muss darauf geachtet werden,
dass die Abfolge von Referenzen stets gegen den trivialen Sonderfall
konvergiert.

Die erste Zeile im Rumpf fängt hier den Sonderfall `x == 0` ab.  Das ist
allgemeiner als gefordert.  Strikt nach Aufgabenstellung würde schon der
Sonderfall `x == 1` genügen; dann würden wir `y` statt `0` zurückgeben.
Das würde i.A. genau so gut funktionieren, aber das Programm würde dann
bei der Multiplikation mit einer linksseiten `0` nicht terminieren.

Die zweite Zeile im Rumpf übersetzt Aufrufe mit einem negativen Argument
für `x` in arithmetisch gleichwertige Aufrufe mit positivem `x` (siehe
dritte Zeile).  Auch das ist allgemeiner als gefordert.  Ohne diese
Zeile terminiert das Programm nur für nicht-negative `x`.

Die dritte Zeile im Rumpf realisiert die eigentlichen Zwischenschritte
der Bauernmultiplikation.  Der rekursive Aufruf entspricht dabei dem
Aufaddieren der darüberliegenden Summanden in der Tabelle.  Der aktuelle
Summand bleibt unberücksichtigt wenn `x` gerade ist (`x % 2 == 0`).

Konvergenz ist dadurch garantiert, dass die dritte Zeile im Rumpf `mul`
stets mit einem betraglich kleineren `x` aufruft, so dass der Sonderfall
`x == 0` früher oder später erreicht wird.

```python
def mul(x, y):
    if x == 0:
        return 0
    if x < 0:
        return mul(-x, -y)
    return (0 if x % 2 == 0 else y) + mul( x//2, y*2 )
```


# 13. Juni 2017 um 19:00 Uhr

Wir hatten einen interessanten Vortrag:

**Cython**

*Stefan Behnel*

Cython ist ein optimierender statischer Complier für Python, der das
Erstellen von C-Erweiterungen für Python erleichtert.
Als Quelle kann (1) reines Python, (2) Python mit Typ-Deklarationen
(Cython-spezifisch) oder (3) C-Quelltext dienen.

Der Cython-Kern-Entwickler Stefan Behnel stellte Cython vor.
Er zeigte an praktischen Beispielen wie leicht es ist mit Cython zu arbeiten.
Er beantwortete tiefgehende Fragen zu Anwendung und Funktionsweise von Cython.



# 11. April 2017 um 19:00 Uhr

Diesmal hatten wir wieder eine freie Diskussion zu Pythonthemen.


# 14. März 2017 um 19:00 Uhr

Wir hatten einen Vortrag:

Mike Müller

**Statische Typisierung für Python**

Python ist eine dynamisch getypte Sprache.
Das wird auch in Zukunft so bleiben.
Mit [mypy](http://mypy-lang.org/) und dem Modul `typing` der
Standardbibliothek ist es aber auch möglich statische Typen als Hinweise
hinzuzufügen.

Diese statischen Typen wertet Python zur Laufzeit **nicht** aus.
mypy arbeitet als Werkzeug mit dem Quelltext und überprüft die Richtigkeit
der Typen ähnlich wie ein Compiler bei statisch getypten Sprachen.
Der Vortrag stellte das generelle Vorgehen für die Nutzung der
optionalen statischen Typisierung mit mypy und die Neuerungen, die Python 3.6
hier mitbringt vor.


# 14. Februar 2017 um 19:00 Uhr

Diesmal hatten wir eine freie Diskussion zu Pythonthemen.
Wir haben uns geschaut welche neuen Bibliotheken in der letzten
Zeit erschien sind.


# 10. Januar 2017 um 19:00 Uhr

Unser Thema war diesmal die nebenläufige und parallele Programmierung.
Dabei haben wir uns vor allem mit den Unterschieden in den
Anwendungsfällen und der Programmierung mit `multiprocessing` und
`asyncio` beschäftigt.

Dazu haben wir mit Code-Beispielen gearbeitet, die zeigen, wie
sich mit diesen Methoden Rechenzeit einsparen lassen kann oder
eben nicht.


# 13. Dezember 2016 um 19:00 Uhr

Diesmal hatten ein vorweihnachtliches Treffen mit offenem Thema.
Wir diskutierten über die letzten Entwicklungen bei Python.
Dabei gab es immer neue Python-Bibliotheken zu entdecken.

# 8. November 2016 um 19:00 Uhr

Zum Treffen gab es einen Einführungsvortrag zu neuronalen Netzen. Theoretische
Hintergründe wurde skiziert und eine Reihe von Implementierungen in Python
vorgestellt: Basierend auf numpy, scikit-learn, tensorflow und keras. Die
Folien und Code sind [in diesem Repo zu finden](https://github.com/miku/nntour).
Die Präsentation mündete in eine Diskussion zu intelligenten Algorithmen im
Allgemeinen und auch ihre gesellschaftlichen Auswirkungen.



# 09. August 2016

# Rust for Pythonistas

The slides are available at [github](https://github.com/klingtnet/lpug-Rust?files=1) and [slideshare](http://www.slideshare.net/AndreasLinz1/rust-for-pythonistas-lpug?qid=8895be3c-0aa5-4555-917a-6d5fb6df6b8b&v=&b=&from_search=1).
